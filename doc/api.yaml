openapi: 3.0.0
paths:
  "/":
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  "/user":
    get:
      operationId: UserController_getUsers
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserDto"
      tags:
      - User
    post:
      operationId: UserController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateUserDto"
      responses:
        '201':
          description: The user has been successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Body does not contain required fields
      tags:
      - User
  "/user/{id}":
    get:
      operationId: UserController_getUser
      summary: Get user by id
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Invalid Id
        '404':
          description: User with ID ${id} not found
      tags:
      - User
    put:
      operationId: UserController_updateUserPassword
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePasswordDto"
      responses:
        '200':
          description: The record has been successfully updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Invalid Id
        '403':
          description: Wrong user password
        '404':
          description: User with ID ${id} not found
      tags:
      - User
    delete:
      operationId: UserController_deleteUser
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: User with ID ${id} was deleted successfully
        '400':
          description: Invalid Id
        '404':
          description: User with ID ${id} not found
      tags:
      - User
  "/artist":
    get:
      operationId: ArtistController_getArtists
      summary: Get all artists
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ArtistResponseDto"
      tags:
      - Artist
    post:
      operationId: ArtistController_createArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ArtistDto"
      responses:
        '201':
          description: The artist has been successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistResponseDto"
        '400':
          description: Request body does not contain required fields
      tags:
      - Artist
  "/artist/{id}":
    get:
      operationId: ArtistController_getArtist
      summary: Get artist by id
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistResponseDto"
        '400':
          description: Invalid Id
        '404':
          description: Artist with ID ${id} not found
      tags:
      - Artist
    put:
      operationId: ArtistController_updateArtist
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ArtistDto"
      responses:
        '200':
          description: The artist data has been successfully updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistResponseDto"
        '400':
          description: Invalid Id
        '404':
          description: Artist with ID ${id} not found
      tags:
      - Artist
    delete:
      operationId: ArtistController_deleteArtist
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: Artist with ID ${id} was deleted successfully
        '400':
          description: Invalid Id
        '404':
          description: Artist with ID ${id} not found
      tags:
      - Artist
  "/album":
    get:
      operationId: AlbumController_getAlbums
      summary: Get all albums
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AlbumResponseDto"
      tags:
      - Album
    post:
      operationId: AlbumController_createAlbum
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AlbumDto"
      responses:
        '201':
          description: The artist has been successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumResponseDto"
        '400':
          description: Request body does not contain required fields
      tags:
      - Album
  "/album/{id}":
    get:
      operationId: AlbumController_getAlbum
      summary: Get album by id
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumResponseDto"
        '400':
          description: Invalid Id
        '404':
          description: Album with ID ${id} not found
      tags:
      - Album
    put:
      operationId: AlbumController_updateAlbum
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AlbumDto"
      responses:
        '200':
          description: The album data has been successfully updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumResponseDto"
        '400':
          description: Invalid Id
        '404':
          description: Album with ID ${id} not found
      tags:
      - Album
    delete:
      operationId: AlbumController_deleteAlbum
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: Album with ID ${id} was deleted successfully
        '400':
          description: Invalid Id
        '404':
          description: Album with ID ${id} not found
      tags:
      - Album
  "/track":
    get:
      operationId: TrackController_getTracks
      summary: Get all tracks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TrackResponseDto"
      tags:
      - Track
    post:
      operationId: TrackController_createTrack
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TrackDto"
      responses:
        '201':
          description: The track has been successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackResponseDto"
        '400':
          description: Request body does not contain required fields
      tags:
      - Track
  "/track/{id}":
    get:
      operationId: TrackController_getTrack
      summary: Get track by id
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackResponseDto"
        '400':
          description: Invalid Id
        '404':
          description: Track with ID ${id} not found
      tags:
      - Track
    put:
      operationId: TrackController_updateTrack
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TrackDto"
      responses:
        '200':
          description: The track data has been successfully updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackResponseDto"
        '400':
          description: Invalid Id
        '404':
          description: Track with ID ${id} not found
      tags:
      - Track
    delete:
      operationId: TrackController_deleteTrack
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: Track with ID ${id} was deleted successfully
        '400':
          description: Invalid Id
        '404':
          description: Track with ID ${id} not found
      tags:
      - Track
  "/favs":
    get:
      operationId: FavoritesController_getFavorites
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/FavoritesResponseDto"
      tags:
      - Favorites
  "/favs/track/{id}":
    post:
      operationId: FavoritesController_addFavoriteTrack
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '201':
          description: The track was successfully added to the favorites.
        '400':
          description: Invalid Id
        '422':
          description: Track with ID ${id} does not exist
      tags:
      - Favorites
    delete:
      operationId: FavoritesController_removeFavoriteTrack
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: Track with ID ${id} was deleted from favorites
        '400':
          description: Invalid Id
        '404':
          description: Track with ID ${id} not found in favorites
      tags:
      - Favorites
  "/favs/album/{id}":
    post:
      operationId: FavoritesController_addFavoriteAlbum
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '201':
          description: The album was successfully added to the favorites.
        '400':
          description: Invalid Id
        '422':
          description: Album with ID ${id} does not exist
      tags:
      - Favorites
    delete:
      operationId: FavoritesController_removeFavoriteAlbum
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: Album with ID ${id} was deleted from favorites
        '400':
          description: Invalid Id
        '404':
          description: Album with ID ${id} not found in favorites
      tags:
      - Favorites
  "/favs/artist/{id}":
    post:
      operationId: FavoritesController_addFavoriteArtist
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '201':
          description: The artist was successfully added to the favorites.
        '400':
          description: Invalid Id
        '422':
          description: Artist with ID ${id} does not exist
      tags:
      - Favorites
    delete:
      operationId: FavoritesController_removeFavoriteArtist
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: Artist with ID ${id} was deleted from favorites
        '400':
          description: Invalid Id
        '404':
          description: Artist with ID ${id} not found in favorites
      tags:
      - Favorites
info:
  title: Home Library
  description: Home music library service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        version:
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
      - id
      - login
      - version
      - createdAt
      - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: user login
        password:
          type: string
          example: user password
      required:
      - login
      - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: dskvfvk*&%bisd
        newPassword:
          type: string
          example: dsfbfbf9)*&dfs
      required:
      - oldPassword
      - newPassword
    ArtistResponseDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
        id:
          type: string
      required:
      - name
      - grammy
      - id
    ArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
        id:
          type: string
      required:
      - name
      - grammy
      - id
    AlbumResponseDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
      required:
      - id
      - name
      - year
      - artistId
    AlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
      required:
      - name
      - year
      - artistId
    TrackResponseDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artistId:
          type: string
        albumId:
          type: string
        duration:
          type: number
      required:
      - id
      - name
      - artistId
      - albumId
      - duration
    TrackDto:
      type: object
      properties:
        name:
          type: string
        duration:
          type: number
        artistId:
          type: string
        albumId:
          type: string
      required:
      - name
      - duration
      - artistId
      - albumId
    FavoritesResponseDto:
      type: object
      properties:
        artists:
          type: array
          items:
            "$ref": "#/components/schemas/ArtistResponseDto"
        albums:
          type: array
          items:
            "$ref": "#/components/schemas/AlbumResponseDto"
        tracks:
          type: array
          items:
            "$ref": "#/components/schemas/TrackResponseDto"
      required:
      - artists
      - albums
      - tracks
